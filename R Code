library(survival)

# A1. function to find the left and right end points
LR.MIC=function(t,ub){
  S = 0
  S1 = 0
  while(S<= min(t,ub)){
    unif = runif(1,0.1,0.25)
    S = S1 + unif
    S1 = S 
  }
  if(t > ub){ # includes t = Inf
    a = c(S,1/0)
  }else if(t <= 0.1){
    a = c(0,S)
  }else{
    a = c(S-unif,S)
  }
  return(a)
}


# A2. data generation code: Two covariates

data.MIC = function(n,alpha,beta1,beta2,setting){ 
  
  z1 = rnorm(n,mean=0,sd=1) 
  z2 = rnorm(n,mean=0,sd=1)
  piz = rep(NA,n) # piz is the cure probability
  
  if(setting==1){
    piz = (exp(0.3-(5*z1)-(3*z2))/(1+exp(0.3-(5*z1)-(3*z2))))
  }
  
  if(setting==2){
    piz = (exp(0.3+(5*z1*z2)-(3*z1*z2))/(1+exp(0.3+(5*z1*z2)-(3*z1*z2))))
  }
  
  U = runif(n,0,1)
  L = rep(NA,n) # left end point 
  R = rep(NA,n) # right end point
  DL = rep(NA,n) # left censoring indicator
  DI = rep(NA,n) # interval censoring indicator
  J = rep(NA,n) # cure indicator
  Sp = rep(NA,n) # overall survival function
  S1 = rep(NA,n) # susceptible survival function
  
  for(i in 1:n){
    if(U[i]<= 1-piz[i]){
      T = 1/0
      ans = LR.MIC(t=T,ub=2.5)
      L[i] = ans[1]
      R[i] = ans[2]
      J[i] = 0
    }else{
      T =  rweibull(1,shape=alpha,scale= exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha) )
      ans = LR.MIC(t=T,ub=2.5)
      L[i] = ans[1]
      R[i] = ans[2]
      J[i] = 1
    }
    
    if(L[i]==0){
      DL[i] = 1
      DI[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((R[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
      S1[i] =  (exp(-((R[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
    }else if(R[i]==1/0){
      DL[i] = 0
      DI[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((L[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
      S1[i] =  (exp(-((L[i]/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
    }else{
      DL[i] = 0
      DI[i] = 1
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((((L[i]+L[i])/2)/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
      S1[i] = (exp(-((((L[i]+L[i])/2)/exp(-((beta1*z1[i])+(beta2*z2[i]))/alpha))^alpha)))
    }
  }#end of for
  return(data.frame(L,R,DL,DI,z1,z2,J,uncure=piz,Sp=Sp,S1=S1))
}#end of function



library(MASS)

# A3. Data generation: Ten covariates with correlation and complex interactions

data.CORR <- function(n,alpha,beta1,beta2,beta3,beta4,beta5,beta6,beta7,beta8,beta9,beta10,setting){
  c<-10
  SigmaMat=matrix(1:5*c, nrow=c,ncol=c) #variance-covariance matrix 
  for(i in 1:nrow(SigmaMat)){
    for(j in 1:ncol(SigmaMat)){
      if (i==j){
        SigmaMat[i,j]<-1} else {
          SigmaMat[i,j]<-0.7^abs(i-j)}
    }
  }
  
  muV=matrix(1:5*c, nrow=1,ncol=c)
  for (j in 1:ncol(muV)) {
    muV[,j]<-0
  }
  
  z <- mvrnorm(n,mu = muV,
               Sigma = SigmaMat)
  
  colnames(z) <- c('z1', 'z2', 'z3', 'z4', 'z5','z6','z7','z8','z9','z10')
  
  piz = rep(NA,n) # this is the uncured probability pi(z)
  
  if(setting==3){ # complex classification boundary with high dimension and correlation
    piz = exp(-exp(-0.8*z[,1]*z[,2]+1.1*z[,2]*z[,4]+0.5*z[,3]+0.2*z[,7]*z[,7]-1.3*sin(z[,5]*z[,6])+1.9*cos(z[,7]*z[,8])-1.5*exp(z[,5]*z[,6]*z[,7])-1.6*z[,7]*z[,8]*z[,9]*z[,10]+0.8*(z[,6]*z[,7])*(z[,8]*z[,9]*z[,8]*z[,9])+1.8*cos(z[,5]*z[,6]*z[,7]*z[,8]*z[,9])+1.2*(abs(z[,6]*z[,7]*z[,8]*z[,9]*z[,10])^0.5)-2.4))
  }
  
  U = runif(n,0,1)
  L = rep(NA,n) # left end point 
  R = rep(NA,n) # right end point
  DL = rep(NA,n) # left censoring indicator
  DI = rep(NA,n) # interval censoring indicator
  J = rep(NA,n) # cure indicator
  Sp = rep(NA,n) # overall survival function
  S1 = rep(NA,n) # susceptible survival function
  
  for(i in 1:n){
    if(U[i]<= 1-piz[i]){
      T = 1/0
      ans = LR.MIC(t=T,ub=2.5)
      L[i] = ans[1]
      R[i] = ans[2]
      J[i] = 0
    }else{
      T =  rweibull(1,shape=alpha,scale= exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha) )
      ans = LR.MIC(t=T,ub=2.5)
      L[i] = ans[1]
      R[i] = ans[2]
      J[i] = 1
    }
    
    if(L[i]==0){
      DL[i] = 1
      DI[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((R[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
      S1[i] =  (exp(-((R[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
    }else if(R[i]==1/0){
      DL[i] = 0
      DI[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((L[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
      S1[i] =  (exp(-((L[i]/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
    }else{
      DL[i] = 0
      DI[i] = 1
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((((L[i]+L[i])/2)/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
      S1[i] = (exp(-((((L[i]+L[i])/2)/exp(-((beta1*z[,1][i])+(beta2*z[,2][i])+(beta3*z[,3][i])+(beta4*z[,4][i])+(beta5*z[,5][i])+(beta6*z[,6][i])+(beta7*z[,7][i])+(beta8*z[,8][i])+(beta9*z[,9][i])+(beta10*z[,10][i]))/alpha))^alpha)))
    }
  }#end of for
  
  return(data.frame(L,R,DL,DI,z,J,uncure=piz,Sp=Sp,S1=S1))
}



library(Rlab)
# A4. Data generation: Ten covariates with only complex interactions

data.HIGH <- function(n,alpha,beta1,beta2,beta3,beta4,beta5,beta6,beta7,beta8,beta9,beta10, setting){
  z1 =rbern(n,prob = 0.5)
  z2 = rbern(n,prob = 0.3)
  z3 =rbern(n,prob = 0.5)
  z4 =rbern(n,prob = 0.7)
  z5 = rnorm(n,mean=0,sd=1) 
  z6 = rnorm(n,mean=0,sd=1)
  z7 = rnorm(n,mean=0,sd=1)
  z8 = rnorm(n,mean=0,sd=1)
  z9 = rnorm(n,mean=0,sd=1)
  z10 = rnorm(n,mean=0,sd=1) 
  
  piz = rep(NA,n) # this is the uncured probability pi(z)
  
  if(setting==4){ # non-linear classification boundary
    piz = exp(-exp(-0.8*z1*z2+1.1*z2*z4+0.5*z3+0.2*z7*z7-1.3*sin(z5*z6)+1.9*cos(z7*z8)-1.5*exp(z5*z6*z7)-1.6*z7*z8*z9*z10+0.8*(z6*z7)*(z8*z9*z8*z9)+1.8*cos(z5*z6*z7*z8*z9)+1.2*(abs(z6*z7*z8*z9*z10)^0.5)-2.4))
  }
  
  U = runif(n,0,1)
  L = rep(NA,n) # left end point 
  R = rep(NA,n) # right end point
  DL = rep(NA,n) # left censoring indicator
  DI = rep(NA,n) # interval censoring indicator
  J = rep(NA,n) # cure indicator
  Sp = rep(NA,n) # overall survival function
  S1 = rep(NA,n) # susceptible survival function
  
  for(i in 1:n){
    if(U[i]<= 1-piz[i]){
      T = 1/0
      ans = LR.MIC(t=T,ub=2.5)
      L[i] = ans[1]
      R[i] = ans[2]
      J[i] = 0
    }else{
      T =  rweibull(1,shape=alpha,scale= exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha) )
      ans = LR.MIC(t=T,ub=2.5)
      L[i] = ans[1]
      R[i] = ans[2]
      J[i] = 1
    }
    
    if(L[i]==0){
      DL[i] = 1
      DI[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((R[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
      S1[i] =  (exp(-((R[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
    }else if(R[i]==1/0){
      DL[i] = 0
      DI[i] = 0
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((L[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
      S1[i] =  (exp(-((L[i]/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
    }else{
      DL[i] = 0
      DI[i] = 1
      Sp[i] = (1-piz[i]) + (piz[i]*exp(-((((L[i]+L[i])/2)/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
      S1[i] = (exp(-((((L[i]+L[i])/2)/exp(-((beta1*z1[i])+(beta2*z2[i])+(beta3*z3[i])+(beta4*z4[i])+(beta5*z5[i])+(beta6*z6[i])+(beta7*z7[i])+(beta8*z8[i])+(beta9*z9[i])+(beta10*z10[i]))/alpha))^alpha)))
    }
  }#end of for
  
  return(data.frame(L,R,DL,DI,z1,z2,z3,z4,z5,z6,z7,z8,z9,z10,J,uncure=piz,Sp=Sp,S1=S1))
}



# A5. Turnbull baseline Estimator 

Turnbull = function(mydata){  #mydata of form (l,r)
  tau = sort(unique(c(unique(mydata$l),unique(mydata$r))), decreasing=FALSE) #create time grid
  
  alpha=matrix(data=0, nrow=length(mydata$l), ncol=length(tau)-1)
  for(i in 1:length(mydata$l)){
    for(j in 1:(length(tau)-2)){
      if(mydata$l[i]<=tau[j] & mydata$r[i] >= tau[j+1]){
        alpha[i,j+1]=1
      }
    }
  }
  tau = tau[1:(length(tau)-1)] #removing infinity
  
  tau.count = rep(0,length(mydata$l))
  for(i in 1:length(tau.count)){  
    tau.count[i] = sum(alpha[i,])
  }
  #find S: initial survival est , p[j]: probability of event occurring at tau[j]
  S = rep(1,length(tau))
  p=rep(0,length(tau))
  for(j in 1:length(tau)){
    for(i in 1:length(mydata$l)){
      if(alpha[i,j]==1){
        p[j] = p[j] + (1/length(mydata$l))*(1/tau.count[i])
      }
    }
  }
  
  for(j in 2:length(tau)){
    S[j] = S[j-1] - p[j]
  }
  S[length(tau)]=0
  continue = TRUE
  iter=0
  while(continue){ 
    d = rep(0,length(tau)) #estimated # of events which occurred at tau[j]
    Y = rep(0,length(tau)) #estimated # at risk at time tau[j]
    p[2:length(S)] = S[1:(length(S)-1)]-S[2:length(S)]
    
    for(j in 2:length(tau)){ #computing updated Product-Limit estimator using d & Y
      for(i in 1:length(mydata$l)){
        if(alpha[i,j]==1){
          d[j] = d[j] + p[j]/sum(alpha[i,]*p)
        }
      }
    }
    for(j in 1:length(tau)){
      Y[j] = length(mydata$l) - sum(d[1:j-1])
    }
    d[length(tau)]=Y[length(tau)] #all at risk at last time in tau estimated to occur at last time in tau
    S.new = rep(1,length(tau))
    for(j in 2:length(tau)){
      S.new[j] = S.new[j-1]*(1-d[j]/Y[j])
    }
    if(max(abs(S-S.new)) < 10^-3){
      iter=iter+1
      S = S.new
      continue = FALSE
    }
    else{
      iter=iter+1
      S = S.new
    }
  }
  out = data.frame(tau,S.new)
  return(out)
}



library(e1071)
library(icenReg)

# A6. SVM EM

em.svm.MIC <-function(TimeL,TimeR,StatusL,StatusI,X,Z,Z1,uncureprob,beta,offsetvar,emmax,eps,mydata,testdata) # beta is the latency parameter vector
{   
  w <- StatusL + StatusI
  n <- length(StatusL)
  m <- dim(testdata)[1]
  
  dat1_0=data.frame(l=TimeL,r=TimeR)
  tb1 <- Turnbull(dat1_0)
  TimeL_s=rep(NA,length(TimeL))
  TimeR_s=rep(NA,length(TimeR))
  
  for(j in 1:length(TimeL)){
    TimeL_s[j]=tb1$S.new[which(tb1$tau==TimeL[j])]
    if(TimeL_s[j]==0){TimeL_s[j]=.Machine$double.eps}
  }
  
  for(j in 1:length(TimeR)){
    if(TimeR[j]==Inf){TimeR_s[j]=0}
    else{
      TimeR_s[j] = tb1$S.new[which(tb1$tau==TimeR[j])] 
      if(TimeR_s[j]==0){TimeR_s[j]=.Machine$double.eps}
    }
  }
  
  TimeK_s = rep(NA,n)
  for(k in 1:n){
    if(TimeL[k]==0){
      TimeK_s[k] = TimeR_s[k]
    }else if(TimeR[k]==1/0){
      TimeK_s[k] = TimeL_s[k]
    }else{
      TimeK_s[k] = TimeL_s[k]
    }
  }
  
  convergence<- 1000;i <-1
  while (convergence > eps & i < emmax){  
    
    survival=drop((TimeK_s)^(exp((beta)%*%t(X[,-1])))) # survival function of the susceptible
    
    ## E step 
    w <- StatusL+StatusI+(1-StatusL-StatusI)*(uncureprob*survival)/((1-uncureprob)+uncureprob*survival) # conditional probability of uncure
    ## M step
    multipleuncureprob=matrix(1:5*n, nrow=n,ncol=5)
    for (j in 1:n){multipleuncureprob[j,]<-rbinom(5,size=1,prob=w[j])}
    uncureprob1<-c(1,1)
    uncureprob2<-c(1,1)
    uncureprob3<-c(1,1)
    uncureprob4<-c(1,1)
    uncureprob5<-c(1,1)
    for (j in 1:n){uncureprob1[j]=multipleuncureprob[j,1]}
    for (j in 1:n){uncureprob2[j]=multipleuncureprob[j,2]}
    for (j in 1:n){uncureprob3[j]=multipleuncureprob[j,3]}
    for (j in 1:n){uncureprob4[j]=multipleuncureprob[j,4]}
    for (j in 1:n){uncureprob5[j]=multipleuncureprob[j,5]}
    
    for (j in 1:n){uncureprob1[j]=uncureprob1[j]*2-1}
    for (j in 1:n){uncureprob2[j]=uncureprob2[j]*2-1}
    for (j in 1:n){uncureprob3[j]=uncureprob3[j]*2-1}
    for (j in 1:n){uncureprob4[j]=uncureprob4[j]*2-1}
    for (j in 1:n){uncureprob5[j]=uncureprob5[j]*2-1}
    
    uncureprob1<-as.factor(uncureprob1)
    uncureprob2<-as.factor(uncureprob2)
    uncureprob3<-as.factor(uncureprob3)
    uncureprob4<-as.factor(uncureprob4)
    uncureprob5<-as.factor(uncureprob5)
    update_cureb<-c(1,1)
    update_pred<-c(1,1)
    
    obj<-tune(svm,uncureprob1~Z[,-1],kernel="radial", data=mydata,ranges=list(gamma=2^(-6:-4),cost=2^(4:6)),tunecontrol=tune.control(sampling = "cross", cross = 10))
    bg<-obj$best.parameters[1]  
    bc<-obj$best.parameters[2]      
    
    mod1<-svm(Z[,-1],uncureprob1,kernel="radial",gamma=bg[[1]],cost=bc[[1]], probability=TRUE)
    pred1<-predict(mod1,Z[,-1],probability = TRUE)
    cpred1<-predict(mod1,newdata=Z1[,-1],probability = TRUE)
    proba1<-attr(pred1, "probabilities")
    cproba1<-attr(cpred1, "probabilities")
    update_cureb1<-c(1,1)
    update_pred1<-c(1,1)
    for (z in 1:n){update_cureb1[z]<-proba1[z,colnames(proba1)==1]}
    for (k in 1:m){update_pred1[k]<-cproba1[k,colnames(cproba1)==1]}
    uncureprob1<-as.numeric(as.character(uncureprob1))
    
    mod2<-svm(Z[,-1],uncureprob2,kernel="radial",gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred2<-predict(mod2,Z[,-1],probability = TRUE)
    cpred2<-predict(mod2,newdata=Z1[,-1],probability = TRUE)
    proba2<-attr(pred2, "probabilities")
    cproba2<-attr(cpred2, "probabilities")
    update_cureb2<-c(1,1)
    update_pred2<-c(1,1)
    for (z in 1:n){update_cureb2[z]<-proba2[z,colnames(proba2)==1]}
    for (k in 1:m){update_pred2[k]<-cproba2[k,colnames(cproba2)==1]}
    uncureprob2<-as.numeric(as.character(uncureprob2))
    
    mod3<-svm(Z[,-1],uncureprob3,kernel="radial",gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred3<-predict(mod3,Z[,-1],probability = TRUE)
    cpred3<-predict(mod3,newdata=Z1[,-1],probability = TRUE)
    proba3<-attr(pred3, "probabilities")
    cproba3<-attr(cpred3, "probabilities")
    update_cureb3<-c(1,1)
    update_pred3<-c(1,1)
    for (z in 1:n){update_cureb3[z]<-proba3[z,colnames(proba3)==1]}
    for (k in 1:m){update_pred3[k]<-cproba3[k,colnames(cproba3)==1]}
    uncureprob3<-as.numeric(as.character(uncureprob3))
    
    mod4<-svm(Z[,-1],uncureprob4,kernel="radial",gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred4<-predict(mod4,Z[,-1],probability = TRUE)
    cpred4<-predict(mod4,newdata=Z1[,-1],probability = TRUE)
    proba4<-attr(pred4, "probabilities")
    cproba4<-attr(cpred4, "probabilities")
    update_cureb4<-c(1,1)
    update_pred4<-c(1,1)
    for (z in 1:n){update_cureb4[z]<-proba4[z,colnames(proba4)==1]}
    for (k in 1:m){update_pred4[k]<-cproba4[k,colnames(cproba4)==1]}
    uncureprob4<-as.numeric(as.character(uncureprob4))
    
    mod5<-svm(Z[,-1],uncureprob5,kernel="radial",gamma=bg[[1]],cost=bc[[1]],probability=TRUE)
    pred5<-predict(mod5,Z[,-1],probability = TRUE)
    cpred5<-predict(mod5,newdata=Z1[,-1],probability = TRUE)
    proba5<-attr(pred5, "probabilities")
    cproba5<-attr(cpred5, "probabilities")
    update_cureb5<-c(1,1)
    update_pred5<-c(1,1)
    for (z in 1:n){update_cureb5[z]<-proba5[z,colnames(proba5)==1]}
    for (k in 1:m){update_pred5[k]<-cproba5[k,colnames(cproba5)==1]}
    uncureprob5<-as.numeric(as.character(uncureprob5))
    
    for (z in 1:n){update_cureb[z]<-(update_cureb1[z]+update_cureb2[z]+update_cureb3[z]+update_cureb4[z]+update_cureb5[z])/5}
    for (k in 1:m){update_pred[k]<-(update_pred1[k]+update_pred2[k]+update_pred3[k]+update_pred4[k]+update_pred5[k])/5}
    
    # latency part 
    
    Q1 = function(param){
      bb = param
      S.L = drop((TimeL_s)^(exp((bb)%*%t(X[,-1]))))
      S.R = drop((TimeR_s)^(exp((bb)%*%t(X[,-1]))))
      out = sum(StatusL*log(1-S.R)) + sum(StatusI*log(S.L-S.R)) + sum((1-StatusL-StatusI)*w*log(S.L))
      return(-out)
    } 
    
    update_beta = optim(par=beta,fn=Q1,method="Nelder-Mead")$par
    
    convergence<-sum(c(update_beta-beta,mean(update_cureb)-mean(uncureprob))^2)
    
    uncureprob <- update_cureb
    uncurepred <- update_pred
    beta <- update_beta
    
    i <- i+1
    #print(i)
  }
  
  S1 = drop((TimeK_s)^(exp((beta)%*%t(X[,-1]))))# survival prob. of the susceptible group
  Sp = (1-uncureprob)+(uncureprob*S1) # survival prob. of the population
  
  em.svm <- list(latencyfit=beta,Uncureprob=uncureprob,Uncurepred=uncurepred,Sp=Sp,S1=S1,tau=convergence, Mod1=mod1, Mod2=mod2, Mod3=mod3, Mod4=mod4, Mod5=mod5)
}

# A7. SVM SMCURE

smcure.svm.MIC <-function(formula,cureform,mydata,testdata,offset=NULL,na.action=na.omit,Var=TRUE,emmax=500,eps=1e-3,nboot=100)
{
  
  call <- match.call()
  cat("Program is running..be patient...")
  ## prepare data
  mydata <- na.action(mydata)
  n <- dim(mydata)[1]
  m <- dim(testdata)[1]
  mf <- model.frame(formula,mydata)
  mp <- model.frame(formula,testdata)
  cvars <- all.vars(cureform)
  Z <- as.matrix(cbind(rep(1,n),mydata[,cvars]))
  Z1 <- as.matrix(cbind(rep(1,m),testdata[,cvars]))
  colnames(Z) <- c("(Intercept)",cvars)
  if(!is.null(offset)) {
    offsetvar <- all.vars(offset)
    offsetvar<-mydata[,offsetvar]}
  else offsetvar <- NULL
  Y <- model.extract(mf,"response")
  X <- model.matrix(attr(mf,"terms"), mf)
  if (!inherits(Y, "Surv")) stop("Response must be a survival object")
  
  TimeL = mydata[,1]
  TimeR = mydata[,2]
  StatusL = mydata[,3]
  StatusI = mydata[,4]
  
  bnm <- colnames(Z)
  nb <- ncol(Z)
  
  betanm <- colnames(X)[-1]
  nbeta <- ncol(X)-1
  
  
  ## initial value 
  w <- StatusL+StatusI
  nw<-c(1,1)
  for(i in 1: n) {nw[i]= w[i]*2-1}
  nw <- as.factor(nw)
  obj<-tune(svm,nw~Z[,-1],kernel="radial", data=mydata,ranges=list(gamma=2^(-6:-4),cost=2^(4:6)),tunecontrol=tune.control(sampling = "cross",cross = 10))
  bg<-obj$best.parameters[1]  
  bc<-obj$best.parameters[2]
  mod <- svm(Z[,-1],nw,kernel="radial",gamma=bg[[1]],cost=bc[[1]], probability=TRUE)
  pred <- predict(mod,Z[,-1], probability = TRUE)
  proba<-attr(pred, "probabilities")
  uncureprob<-c(1,1)
  
  for (i in 1:n){uncureprob[i]<-proba[i,colnames(proba)==1]}
  nw<-as.numeric(as.character(nw))
  
  fit.init = ic_sp(Surv(TimeL,TimeR,type='interval2')~X[,-1],model="ph",data = mydata)
  beta <- fit.init$coefficients
  
  ## do EM algo
  emfit <- em.svm.MIC(TimeL,TimeR,StatusL,StatusI,X,Z,Z1,uncureprob,beta,offsetvar,emmax,eps,mydata,testdata)
  latency = emfit$latencyfit
  UN<-emfit$Uncureprob
  PRED<-emfit$Uncurepred
  S0<-emfit$S0
  MOD1<-emfit$Mod1
  MOD2<-emfit$Mod2
  MOD3<-emfit$Mod3
  MOD4<-emfit$Mod4
  MOD5<-emfit$Mod5
  Sp = emfit$Sp
  S1 = emfit$S1
  
  
  if(Var){
    latency_boot<-matrix(rep(0,nboot*(nbeta)), nrow=nboot)
    iter <- matrix(rep(0,nboot),ncol=1)
    
    tempdata <-cbind(TimeL,TimeR,StatusL,StatusI,X,Z)
    data1<-subset(tempdata,(StatusL+StatusI)==1);data0<-subset(tempdata,(StatusL+StatusI)==0)
    n1<-nrow(data1);n0<-nrow(data0)  
    i<-1
    while (i<=nboot){
      print(i)
      id1<-sample(1:n1,n1,replace=TRUE);id0<-sample(1:n0,n0,replace=TRUE)
      bootdata<-rbind(data1[id1,],data0[id0,])
      
      bootZ <- bootdata[,bnm]
      bootX <- as.matrix(cbind(rep(1,n),bootdata[,betanm]))
      bootfit <- em.svm.MIC(bootdata[,1],bootdata[,2],bootdata[,3],bootdata[,4],bootX,bootZ,Z1,uncureprob,beta,offsetvar,emmax,eps,mydata,testdata)
      latency_boot[i,] <- bootfit$latencyfit
      if (bootfit$tau<eps){
        i<-i+1}
    }#end of while
    
    latency_var <- apply(latency_boot, 2, var)
    latency_sd <- sqrt(latency_var)
    
  }
  
  fit<-list()
  class(fit) <- c("smcure.svm.MIC")
  
  fit$latency <- latency
  if(Var){
    fit$latency_var <- latency_var
    fit$latency_sd <- latency_sd
    fit$latency_zvalue <- fit$latency/latency_sd
    fit$latency_pvalue <- (1-pnorm(abs(fit$latency_zvalue)))*2}
  cat(" done.\n")
  fit$call <- call
  fit$UN<- UN
  fit$PRED<- PRED
  fit$Sp = Sp
  fit$S1 = S1
  fit$S0 = S0
  final<- fit$UN
  fit
}
